{% from "unbound/map.jinja" import unbound with context -%}
{% from "unbound/macros.jinja" import safe_print, directive -%}

###############################################################################
#
# DO NOT EDIT
#
# This file is managed by Salt via {{ source }}
# Modify the config that generates this file instead
#
###############################################################################

server:
    # The following line will configure unbound to perform cryptographic
    # DNSSEC validation using the root trust anchor.
    auto-trust-anchor-file: {{ unbound.get('auto-trust-anchor-file') }}
    {% do unbound.remove('auto-trust-anchor-file') %}

{% for k,v in unbound.get('server').items()|sort(attribute='1.name') %}
    {%- if v is iterable %}
    {%- for i in v %}
    {{ directive(k) }}: {{ safe_print(v) }}
    {%- endfor %}
    {%- else %}
    {{ directive(k) }}: {{ safe_print(v) }}
    {%- endif -%}
{%- endfor %}

{%- if config.stub_zone is defined %}
{% for zone in config.stub_zone %}
stub-zone:
    name: "{{ zone.name }}"
    {% do zone.remove('name') %}
{% for k,v in zone.items() %}
    {%- if v is iterable %}
    {%- for i in v %}
    {{ directive(k) }}: {{ safe_print(v) }}
    {%- endfor %}
    {%- else %}
    {{ directive(k) }}: {{ safe_print(v) }}
    {%- endif -%}
{%- endfor %}
{%- endfor %}
{%- endif -%}

{%- if config.forward_zone is defined %}
    {% for zone in config.forward_zone %}
forward-zone:
    name: "{{ zone.name }}"
    {% do zone.remove('name') %}
{% for k,v in zone.items() %}
    {%- if v is iterable %}
    {%- for i in v %}
    {{ directive(k) }}: {{ safe_print(v) }}
    {%- endfor %}
    {%- else %}
    {{ directive(k) }}: {{ safe_print(v) }}
    {%- endif -%}
{%- endfor %}
{%- endfor %}
{%- endif -%}
